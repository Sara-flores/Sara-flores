{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMkuLQHrHWIjTfpfB312zoh",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Sara-flores/Sara-flores/blob/main/M%C3%A9todo%20de%20horner%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "id": "xXCqkjZuRskQ"
      },
      "outputs": [],
      "source": [
        "\n",
        "#aqui evaluamos usando el método de horner para hallar las raices\n",
        "def horner_evalua(coeficiente, x):\n",
        "    \"\"\"Evalúa un polinomio en x usando el método de Horner.\"\"\"\n",
        "    result = 0\n",
        "    for coef in coeficiente:\n",
        "        result = result * x + coef\n",
        "    return result"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "#derivamos nuestra función\n",
        "def derivada(coeficiente):\n",
        "    \"\"\"Calcula los coeficientes de la derivada de un polinomio.\"\"\"\n",
        "    return [coef * i for i, coef in enumerate(coeficiente)][1:]"
      ],
      "metadata": {
        "id": "r5JgKku0Rw4w"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "#usaremos el método de Newton para encontrar la raíz\n",
        "def newton_metodo(coeficiente, x0, tolerance=1e-7, max_iterations=100):\n",
        "    \"\"\"Aplica el método de Newton para encontrar las raíces del polinomio.\"\"\"\n",
        "    for iteration in range(max_iterations):\n",
        "        P_x0 = horner_evalua(coefficients, x0)\n",
        "        P_prime_x0 = horner_evalua(derivada(coefficients), x0)\n",
        "\n",
        "        if P_prime_x0 == 0:\n",
        "            print(\"Derivada cero, no se puede continuar.\")\n",
        "            return None\n",
        "\n",
        "        # Actualización de x0\n",
        "        x1 = x0 - P_x0 / P_prime_x0\n",
        "\n",
        "        # Verificar la convergencia\n",
        "        if abs(x1 - x0) < tolerance:\n",
        "            return x1\n",
        "\n",
        "        x0 = x1\n",
        "\n",
        "    print(\"No se encontró raíz en el número máximo de iteraciones.\")\n",
        "    return None\n",
        "\n",
        "# Coeficientes del polinomio P(x) = 2x^4 - 3x^2 + 3x - 4\n",
        "coefficients = [2, 0, -3, 3, -4]  # 2x^4 + 0x^3 - 3x^2 + 3x - 4\n",
        "\n",
        "# Valor inicial\n",
        "x0 = -2\n",
        "\n",
        "# Encontrar la raíz\n",
        "root = newton_metodo(coefficients, x0)\n",
        "if root is not None:\n",
        "    print(f\"Raíz encontrada: {root}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KuWAFD3aR2yd",
        "outputId": "5bf29134-3191-4b74-e664-dad533e68c3e"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Raíz encontrada: -1.738956294347318\n"
          ]
        }
      ]
    }
  ]
}